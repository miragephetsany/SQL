--This is my first project under the SQL Bootcamp for my BreakIntoTech certification.
--I have queried multiple tables to determine the statistics for customer and order data.

#Q1: How many orders were placed in January?

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid)=6
AND orderid <> 'Order ID'
;

#There were 9681 orders placed in January.

----

#Q2: How many of those orders were an iPhone?

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid)=6
AND orderid <> 'Order ID'
;

#There are 379 orders made for an iPhone.

----

#Q3: Select the customer account numbers for all the orders that were placed in February.

SELECT distinct 
customers.acctnum
FROM BIT_DB.customers
INNER JOIN BIT_DB.FebSales
ON customers.order_id=FebSales.orderID
WHERE length(orderid)=6
AND orderid <> 'Order ID'
;

#In order to find my results all the orders placed for all of the customer account numbers, I needed to JOIN the tables.

----

#Q4: Which product was the cheapest one sold in January, and what was the price?

SELECT distinct product, MIN(price) price
FROM BIT_DB.JanSales Jan
;

SELECT distinct product, price
FROM BIT_DB.JanSales
ORDER BY price ASC LIMIT 1;

#The cheapest product is the AAA Batteries (4-pack) that are $2.99. 
#I inserted 2 queries. I did this to show that although both may be answered in separate ways, it gives the same result. The difference in code is that the second query simply only wants to display 1 ansewr only in ascending order from the columns provided.

----

#Q5: What is the total revenue for each product sold in January?

SELECT SUM(quantity)*price Revenue
,product
FROM BIT_DB.JanSales
GROUP BY product
;

SELECT SUM(quantity)*price Revenue
,product
FROM BIT_DB.JanSales
GROUP BY product
;

#The revenue for each item sold are as follows:
#20in Monitor: 23647.85
#27in 4k Gaming Monitor: 121676.88
#27in FHD Monitor: 62845.810000000005
#34in Ultrawide Monitor: 119316.86
#AA Batteries (4-pack): 5472
#AAA Batteries (4-pack): 4772.04
#Apple Airpods Headphones: 122100
#Bose SoundSport Headphones: 65893.41
#Flatscreen TV: 72900
#Google Phone: 190800
#LG Dryer: 23400
#LG Washing Machine: 25200
#Lightning Charging Cable: 17207.45
#Macbook Pro Laptop: 399500
#ThinkPad Laptop: 216997.83000000002
#USB-C Charging Cable: 15343.8
#Vareebadd Phone: 50000
#Wired Headphones: 12961.19
#iPhone: 165300

----

#Q6: Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

#This first query shows a standard layout of the quantity of the products sold, the individual product price, and location/address where the product was sold.
#Query 2 below Query 1.

SELECT quantity
,price
,product
,location
FROM BIT_DB.FebSales
WHERE location='548 Lincoln St, Seattle, WA 98101'
;

#Q2 (below) shows the quantity of the product multiplied by the price of the product (price from above), making the total $7.68 (3.84x2).
#I removed the location column to keep the query more clean in appearance.
#Also added the WHERE statement to specify what we are originally looking for to provide us our results.

SELECT SUM(Quantity)
,product
,sum(quantity)*price Revenue
FROM BIT_DB.FebSales
WHERE location='548 Lincoln St, Seattle, WA 98101'
GROUP BY product
;

#The product(s) sold in February at 548 Lincoln St in Seattle is 2 AA Batteries making the total revenue $7.68.

----

#Q7: How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT COUNT(distinct customers.acctnum) Customers
,AVG(Quantity*price)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.OrderID=Customers.order_id
WHERE FebSales.Quantity>2
AND length(orderID)=6
AND orderid <> 'Order ID'
;

#The average amount spent for these customers is $13.828 (rounded).
#There are 278 customers who ordered 2 products at a time in February.
#Distinct is in code to avoid duplicates.
#I multipled quantity and price ro get an average result for the question needed.
#I had to left join in my query so I could receive all data needed from first column/table, which is the acctnum.
#The WHERE statement species exactly a minimum quantity of 2 a customer has ordered.
#The Length and <> statement is added to avoid unnecessary space and extra characters.

----

#Q8: List all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY product
;

#We are looking for all products sold, which means we'll need to find the total/sum.
#The % before and after Los Angeles means any characters before and after it, but still breaking the search down to the specific city making the result easier and cleaner.
#The GROUP BY is telling SQL we want to group and lay out all of the product results that is sent back.
